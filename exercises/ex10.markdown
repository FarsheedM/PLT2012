#Exercise 10#

##Abstract Syntax vs. Concrete Syntax##

###Specification vs. Identification###

```
Exp ::= Int | Exp Opr Exp
Opr ::= + | - | * | /
```

vs.

```
Exp  ::= Exp1 | Exp LOp Exp1
Exp1 ::= Exp2 | Exp1 HOp Exp2
Exp2 ::= Int | ( Exp )

LOp ::= + | -
HOp ::= * | /
```

###Theoretical Formulation###

```
e (- Exp
n (- Int
o (- Opr

e ::= n | e1 o e2
o ::= + | - | * | /
```

Is it abstract?

###Abstract vs. Concrete###

```
Exp ::= Num(Int)
      | Cpd(Opr, Exp, Exp)
```

or

```scala
sealed abstract class Exp

type Opr = String

case class Num(int : Int) extends Exp
case class Cpd(opr : Opr, lhs : Exp, rhs : Exp) extends Exp
```

vs.

Prefix notation, infix notation, postfix notation, English, German, etc.

##Inductive Definitions and Rule Induction##

###Inductive Definitions###

Inductively defined sets: natural numbers, arithmetic expressions

Inductively defined relations: *m Div n*, evaluation relation of arithmetic
expressions

###Rule Induction###

Rule induction rules!

1. Prove that the sum of the first *n* natural numbers is _n \* (n + 1) / 2_.

2. Prove that the number of leaves is one more than the number of nodes in the
abstract syntax tree for every arithmetic expression.

3. Prove that *m Div n1* and *m Div n2* implies *m Div n1 + n2*.

##Evaluation Semantics vs Reduction Semantics##

1. Give the **(structural) evaluation semantics** (aka. **(structural) big-step
(operational) semantics**, **natural semantics**) for arithmetic expressions.

2. Compare evaluation semantics and **(structural) reduction semantics** (aka.
**(structural) small-step (operational) semantics**.

3. Prove that the evaluation semantics coincides with the multi-step reduction
semantics.

