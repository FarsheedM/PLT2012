#Exercise 10#

##Abstract Syntax vs. Concrete Syntax##

###Specification vs. Identification###

```
Exp ::= Int | Exp Opr Exp
Opr ::= + | - | * | /
```

vs.

```
Exp  ::= Exp1 | Exp LOp Exp1
Exp1 ::= Exp2 | Exp1 HOp Exp2
Exp2 ::= Int | ( Exp )

LOp ::= + | -
HOp ::= * | /
```

###Theoretical Formulation###

```
e (- Exp
n (- Int
o (- Opr

e ::= n | e1 o e2
o ::= + | - | * | /
```

Is it abstract?

###Abstract vs. Concrete###

```
Exp ::= Num(Int)
      | Prm(Opr, Exp, Exp)
```

and in Scala

```scala
sealed abstract class Exp

type Opr = String

case class Num(int : Int) extends Exp
case class Prm(opr : Opr, lhs : Exp, rhs : Exp) extends Exp
```

vs.

Prefix notation, infix notation, postfix notation, English, etc.

##Rule Induction##

###Inductive Definitions###

Inductively defined sets: natural numbers, arithmetic expressions

Inductively defined relations: m div n, evaluation relation of arithmetic
expressions

###Rule Induction###

Rule induction rules!

##Evaluation Semantics vs Reduction Semantics##

Give the **(structural) evaluation semantics** (aka. **(structural) big-step
(operational) semantics**, **natural semantics**) for arithmetic expressions.

Compare evaluation semantics and **(structural) reduction semantics** (aka.
**(structural) small-step (operational) semantics**.

